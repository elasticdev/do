#!/usr/bin/env python
#
#This file is part of "jiffy".
#
#Project: jiffy: A product for building and managing infrastructure: 
#cloud provider services, and servers and their configurations.
#
#Description: A product for building and managing infrastructure. 
#This includes third party API calls for services such as virtual
#cloud servers, load balancers, databases, and other. The product 
#manages connectivity and appropriate communication among these 
#aws.
#
#Copyright (C) Gary Leong - All Rights Reserved
#Unauthorized copying of this file, via any medium is strictly prohibited
#Proprietary and confidential
#Written by Gary Leong  <gwleong@gmail.com, September 17,2015

import os
import json
import sys
from time import sleep

from ed_helper_publisher.utilities import convert_str2json
from ed_helper_publisher.utilities import convert_str2list
from ed_helper_publisher.loggerly import ElasticDevLogger
from ed_helper_publisher.cloud.docli import DoCli

class Main(DoCli):

    def __init__(self,**kwargs):

        DoCli.__init__(self)
        self.classname = 'Droplets'
        self.logger = ElasticDevLogger(self.classname,logcategory="cloudprovider")
        self.logger.debug("Instantiating %s" % self.classname)
        self.base_cmd = "doctl compute droplet"
        self.product = "droplet"
        self.provider = "do"
        self.resource_type = "server"
        self.shelloutconfig = "elasticdev:::do::droplet"

    def exists(self,**kwargs):

        self.get_region()
        #doctl compute droplet list --region nyc3 --output json -t $DO_TOKEN

        add_cmd = "list"

        name = kwargs.get("name")
        instance_id = kwargs.get("instance_id")
        convert_to_json = kwargs.get("convert_to_json",True)

        _cmd = "{} {}".format(self.base_cmd,add_cmd)
        cmd = self.get_final_cmd(_cmd)

        results = self.execute(cmd,convert_to_json=convert_to_json,exit_error=False)["output"]
        if not results: return {"status":False}

        for result in results:

            if instance_id and int(instance_id) == int(result["id"]): 
                result["status"] = True
                return result

            if name and str(name) == str(result["name"]):
                result["status"] = True
                return result

        return {"status":False}

    def get(self):

        self.get_region()

        results = self.exists(**self.inputargs)

        if results.get("status") is None: exit(0)

        if results.get("status") is False: 
            self.cmd_failed(**self.inputargs)

        self.successful_output(output=results)

    def create(self):

        #doctl compute droplet create webserver01 --region nyc1 --image debian-8-x64 --size 4gb --ssh-keys 1234 --wait

        self.get_region()
        name = self.inputargs["name"]
        image = self.inputargs.get("image","s-1vcpu-1gb")
        droplet_size = self.inputargs.get("DROPLET_SIZE","s-1vcpu-1gb")
        key_id = self.inputargs.get("key_id")
        add_tags = self.inputargs.get("tags")
        confirm = self.inputargs.get("confirm",True)
        monitoring = self.inputargs.get("monitoring",True)
        backup = self.inputargs.get("backup")
        private_networking = self.inputargs.get("private_networking",True)

        # Needs False if it finds the server
        if self.exists(convert_to_json=False,**self.inputargs).get("status") is not False:
            failed_message = "{} name = {} already exists".format(self.product,name)
            self.cmd_failed(failed_message=failed_message)

        add_cmd = "create"

        _cmd = "{} {} {} --image {} --size {}".format(self.base_cmd,
                                                      add_cmd,
                                                      name, 
                                                      image,
                                                      droplet_size)

        if key_id: _cmd = "{} --ssh-keys {}".format(_cmd,key_id)
        if monitoring: _cmd = "{} --enable-monitoring".format(_cmd)
        if private_networking: _cmd = "{} --enable-private-networking".format(_cmd)
        if backup: _cmd = "{} --enable-backups".format(_cmd)

        if confirm: _cmd = "{} --wait".format(_cmd)
        cmd = self.get_final_cmd(_cmd,output_json=True)

        Instance = self.execute(cmd,convert_to_json=True,exit_error=True)["output"][0]

        resource = {"raw":{}}
        resource["raw"][self.product] = Instance
        resource['name'] = name
        resource['hostname'] = name

        resource['instance_id'] = Instance['id']
        resource['_id'] = Instance['id']
        resource['id'] = Instance['id']

        resource['image_id'] = Instance['image']["id"]
        resource['image_name'] = Instance['image']["name"]
        resource['region'] = Instance["region"]["slug"]

        for network in Instance["networks"]["v4"]:
            resource['{}_ip'.format(network["type"])] = network["ip_address"]

        resource["resource_type"] = self.resource_type
        resource["provider"] = self.provider
        resource["region"] = self.do_default_region
        resource["do_default_region"] = self.do_default_region
        resource['shelloutconfig'] = self.shelloutconfig
        resource['status'] = "running"
        resource["active"] = True

        tags = self.get_tags()
        tags.extend( [ resource["id"], resource["name"], resource["region"] ] )

        if add_tags:
            try:
                add_tags = convert_str2json(add_tags)
            except:
                add_tags = convert_str2list(add_tags,split_char=",")

            tags.append(add_tags)

        # Make sure tags are distinct
        resource["tags"] = list(set(tags))

        # Destroy is special and is at the root level
        resource["destroy"] = {"shelloutconfig":self.shelloutconfig}

        resource["destroy"]["env_vars"] = json.dumps({"NAME":name,
                                                      "CONFIRM":confirm,
                                                      "INSTANCE_ID":resource["id"],
                                                      "NAME":resource["name"],
                                                      "METHOD":"destroy",
                                                      "DO_DEFAULT_REGION":self.do_default_region,
                                                      "DO_TOKEN":self.do_token})

        self.successful_output(output=resource)

    def destroy(self):

        #doctl compute droplet delete <droplet-id|droplet-name>... [flags]

        self.get_region()
        name = self.inputargs.get("name")
        instance_id = self.inputargs.get("instance_id")

        if instance_id: 
            ref_hostname = instance_id
        elif name: 
            ref_hostname = name
        else:
            msg = "you need to provide the hostname or name to destroy server"
            self.logger.error(msg)
            exit(9)

        _results = self.exists(convert_to_json=False,**self.inputargs)

        if not _results.get("status"):
            output = '{} "{}" in "{}" does not exists'.format(self.product,
                                                              ref_hostname,
                                                              self.do_default_region)
            self.successful_output(output=output)

        add_cmd = "delete"
        _cmd = "{} {} {} --force".format(self.base_cmd,
                                         add_cmd,
                                         ref_hostname)

        # You don't include region when deleting on digital ocean
        cmd = self.get_final_cmd(_cmd,add_region=False,output_json=True)
        results = self.execute(cmd,convert_to_json=None)

        if results.get("status") is True: 

            self.logger.debug('{} "{}"destroyed in {}'.format(self.product,
                                                              ref_hostname,
                                                              self.do_default_region))

            self.successful_output(output=results["output"])

        sleep(2)

        failed_message = "could not destroyed {} in {}".format(self.product,
                                                               ref_hostname,
                                                               self.do_default_region)
        self.cmd_failed(failed_message=failed_message)

def usage():

    print """
script + environmental variables

or

script + json_input (as argument)

environmental variables:
    basic:
        DO_TOKEN  
        METHOD
        DO_DEFAULT_REGION (optional)

    create:
        DROPLET_SIZE (default - s-1vcpu-1gb)
        IMAGE 
        NAME
        KEY_ID
        MONITORING
        PRIVATE_NETWORKING
        BACKUP
        JOB_INSTANCE_ID (optional)
        SCHEDULE_ID (optional)
        CONFIRM (optional)
        TAGS (optional)

    destroy:
        INSTANCE_ID
        NAME

    get:
        NAME

       """
    exit(4)

if __name__ == '__main__':

    try:
        json_input = sys.argv[1]
    except:
        json_input = None

    main = Main()

    if json_input:
        main.set_inputargs(json_input=json_input)
    else:
        set_env_vars = [ "method",
                         "name",
                         "image",
                         "droplet_size",
                         "job_instance_id",
                         "schedule_id",
                         "instance_id",
                         "monitoring",
                         "private_networking",
                         "backup",
                         "key_id",
                         "confirm",
                         "tags",
                         "do_default_region" ]

        main.set_inputargs(set_env_vars=set_env_vars)
   
    method = main.inputargs.get("method")

    if not method:
        print "method/ENV VARIABLE METHOD is needed"
        exit(4)

    # Set class and region
    main.get_region()

    if method == "create":

        req_keys = [ "name",
                     "image",
                     "key_id" ]

        main.check_required_inputargs(keys=req_keys)
        main.create()

    elif method == "destroy":
    
        main.destroy()

    elif method == "get":

        main.check_required_inputargs(keys=["name"])
        main.get()

    else:
        usage()
        print 'method "{}" not supported!'.format(method)
        exit(4)
